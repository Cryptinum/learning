/**
 * 在编写继承类时需要注意的要点。
 * 
 * @version 1.0 2023-06-29
 * @author Zhao Chonghao
 */

public class C10_InheritanceHints {
    /*
     * 章节C主要介绍了类的继承，在编写类的继承时，一些要点仍然需要强调与注意
     * 
     * 1. 将共同的或一般性的操作和类放在父类中
     * 
     *       可以看到，我们在构造Person-Student/Employee类中把name域放在了最高级
     *    的父类Person中。
     * 
     * 2. 不要用protected域
     * 
     *       实际上protected机制并没有给代码太多的保护。一个是一般来说子类的创建
     *    不受限制，这样任何人都可以通过创建子类访问protected域，二是Java中所有
     *    处于同一个package中的类都可以访问package中的所有protected域，这样也
     *    失去了保护意义。
     *       protected一般用于标注还没准备大规模使用，需要在子类中进行定义的方法。
     * 
     * 3. 继承用来构造的为“是一种”关系
     * 
     *       一定要防止对继承的滥用，继承需要明确的是一种“is-a”关系，父类所含有的
     *    一切性质也必须被子类所拥有，从这种意义上讲，子类需要是父类的一种特殊情况，
     *    因此除非确认是这样的关系，否则不必使用继承。
     * 
     * 4. 继承关系也会继承所有父类的方法
     * 
     *       除非子类能够使父类的方法对子类也有意义，否则不要使用子类。
     *       比如父类Day中有addDay方法，我们想创建子类Holiday，然而使用addDay
     *    会使得一个假期变成非假期，因此addDay对Holiday是没有意义的，这种情况下
     *    Holiday这个子类不应该被创建，除非Holiday中的域是immutable的。
     *       从数学角度上讲，一个使类映射到类的方法应当是自我封闭的。
     * 
     * 5. 重载不要改变方法的效果
     * 
     *       重载不仅仅需要保持格式更要保持其行为，这是出于一致性考虑的。
     * 
     * 6. 用多态而避免用类型检验
     * 
     *       多态是子类继承父类且二者都有相同名称的方法，同时子类中的该方法对父类的
     *    对应方法进行了重载，具体见主函数中的示例。多态指的是方法的多态。
     *       这种方法避免了用if来判断类型并输出相似的结果，且代码也更容易维护。
     * 
     * 7. 避免滥用反射类
     * 
     *       反射类在软件工程中应尽量避免使用以防止编译器无法输出bug。
     */

    public static void main(String[] args) {
        A a = new AA(); // 父类的引用指向子类的实例
        a.eat(); // a实际上是一个AA的实例，因此
    }
}

class A {
    public void eat() {
        System.out.println("1");
    }
}

class AA extends A {
    // AA是A的子类
    public void eat() {
        System.out.println("2");
    }
}